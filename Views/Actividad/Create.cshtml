@model supervisor_agente.Data.Actividad

@{
    ViewData["Title"] = "Create";
}

<h2 class="text-center">Nueva Actividad</h2>
<hr />
<div class="row">
    <form asp-action="Create">
        <div class="col-md-6">
            <div class="row mb">
                <label class="control-label bg-white col-md-4 text-right">Buscar</label>
                <div class="col-md-4">
                    <input asp-for="asuntoId" type="text" placeholder="Id Asunto" class="form-control" />
                    <span asp-validation-for="asuntoId" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-default">Buscar</button>
                </div>
            </div>
            <div class="mb"><h2 class="h4 text-center">Nuevo asunto</h2></div>
            <div class="row mb">
                <label class="control-label bg-white col-md-4 text-right">Motivo</label>
                <div class="col-md-8">
                    <textarea asp-for="asunto.motivo" class="form-control" placeholder="Motivo o descripción"></textarea>
                    <span asp-validation-for="asunto.motivo" class="text-danger"></span>
                </div>
            </div><!-- /input-group -->

            <div class="row mb">
                <label class="control-label bg-white col-md-4 text-right">Tipo</label>
                <div class="col-md-8">
                    <div class="radio">
                        <label><input type="radio" asp-for="asunto.tipo" value="DUDA">DUDA</label>
                    </div>
                    <div class="radio">
                        <label><input type="radio" asp-for="asunto.tipo" value="CONSULTA">CONSULTA</label>
                    </div>
                    <div class="radio">
                        <label><input type="radio" asp-for="asunto.tipo" value="RECLAMO">RECLAMO</label>
                    </div>
                    <span asp-validation-for="asunto.tipo" class="text-danger"></span>
                </div>
            </div>
            <div class="row mb">
                <div class="checkbox col-md-4"></div>
                <div class="checkbox col-md-8">
                    <label>
                        <input asp-for="asunto.estaResuelto" type="checkbox">
                        Se resolvió el asunto
                        </label>
                </div>
            </div>
        </div>
        <div class="col-md-4">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group row">
                <label asp-for="fecha" class="control-label col-md-12">Fecha</label>
                
                <div class="col-md-6">
                    <input asp-for="fecha" type="date" class="form-control" />
                    <span asp-validation-for="fecha" class="text-danger"></span>
                </div>

            </div>

            <div class="form-group row">
                <div class="col-md-6">
                    <button id='btn-llamada' data-status="NO_CALL" type="button" class="btn btn-block btn-danger">Iniciar llamada</button>
                </div>
            </div>
            <div class="clock-group mb">
                <input type="hidden" asp-for="duracion" data-type="calculated" class="form-control"/>
                <div class="clock-elem">
                    <input type="text" data-type="minutes" class="form-control"/>
                </div>
                
                <div class="clock-elem">
                    <input type="text" data-type="seconds" class="form-control"/>
                </div>
                <div class="clock-elem">
                    <label class="control-label">min</label>
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Agregar actividad" class="btn btn-primary" />
            </div>
        </div>
    </form>
</div>

<div>
    <a asp-action="Index">Volver a lista</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        var clock = {
            minutes: 0, 
            seconds: 0,
            calculated: 0, 
            idInterval: null,
            toFormat0X: function(number) {
                if(number>59) {
                    throw { message: "Incompatible number" }
                }
                var dig1 = parseInt(number / 10);
                var dig2 = number % 10;
                console.log('dig1: '+dig1+', dig2: '+dig2);
                if(dig1 > 0) {
                    return dig1+''+dig2;
                } else {
                    return '0'+dig2;
                }
            }, 
            recalculate: function () {
                var min = this.inputMinutes.val();
                this.minutes = parseInt(min);
                var sec = this.inputSeconds.val();
                this.seconds = parseInt(sec);
                this.inputCalculated.val( this.seconds + this.minutes * 60 );
            },
            init: function () {
                //extraer los inputs
                this.inputMinutes = $('.clock-group input[data-type=minutes]');
                this.inputSeconds = $('.clock-group input[data-type=seconds]');
                this.inputCalculated = $('.clock-group input[data-type=calculated]');
                
                //asignar valores
                this.inputMinutes.val( this.toFormat0X(this.minutes) );
                this.inputSeconds.val( this.toFormat0X(this.seconds) );
                this.inputCalculated.val(this.seconds + this.minutes*60);
            }, 
            update: function () {
                this.calculated += 1;
                this.minutes = parseInt(this.calculated / 60);
                this.seconds = this.calculated % 60;

                this.inputMinutes.val( this.toFormat0X(this.minutes) );
                this.inputSeconds.val( this.toFormat0X(this.seconds) );
                this.inputCalculated.val( this.seconds + this.minutes*60 );
            }
        };
        clock.init();
        $('.clock-group input').on('input', function (e) {
            clock.recalculate();
        });
        $('#btn-llamada').click(function () {
            if(clock.idInterval === null) {
               clock.idInterval = window.setInterval(function() {
                    clock.update();
                }, 1000);
            } else {
                window.clearInterval(clock.idInterval);
                clock.idInterval = null;
            }
            var btnLlamada = $(this);
            var estado = btnLlamada.attr('data-status');
            if(estado==='ON_CALL') {
                btnLlamada.text("Iniciar llamada");
                btnLlamada.attr('data-status', 'NO_CALL');
            } else {
                btnLlamada.text("Finalizar llamada");
                btnLlamada.attr('data-status', 'ON_CALL');
            }
        });
    </script>
}
@section Styles {
<style>
    .clock-group {
        display: block;
        max-width: 15em;
        background-color: white;
    }
    .clock-group::after {
        display: table;
        clear: both;
        content: '';
    }
    .clock-elem {
        float: left;
        width: 30%;
    }
</style>
}